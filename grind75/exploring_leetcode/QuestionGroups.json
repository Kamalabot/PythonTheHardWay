{
  "Week 1": [
    {
      "slug": "two-sum",
      "title": "Two Sum",
      "url": "https://leetcode.com/problems/two-sum",
      "duration": 15,
      "epi": null,
      "difficulty": "Easy",
      "id": 1,
      "topic": "array",
      "routines": ["hashing"],
      "ProblemStatement":["Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
                        "You may assume that each input would have exactly one solution, and you may not use the same element twice.",
                        "You can return the answer in any order"]
    },
    {
      "slug": "valid-parentheses",
      "title": "Valid Parentheses",
      "url": "https://leetcode.com/problems/valid-parentheses",
      "duration": 20,
      "epi": 3,
      "difficulty": "Easy",
      "id": 20,
      "topic": "stack",
      "routines": [],
      "ProblemStatement":["Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
      "An input string is valid if:","Open brackets must be closed by the same type of brackets.","Open brackets must be closed in the correct order.",
      "Every close bracket has a corresponding open bracket of the same type"]
    },
    {
      "slug": "merge-two-sorted-lists",
      "title": "Merge Two Sorted Lists",
      "url": "https://leetcode.com/problems/merge-two-sorted-lists",
      "duration": 20,
      "epi": 0,
      "difficulty": "Easy",
      "id": 21,
      "topic": "linked-list",
      "routines": [],
      "ProblemStatement":["You are given the heads of two sorted linked lists list1 and list2.",
      "Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.",
      "Return the head of the merged linked list."]
    },
    {
      "slug": "best-time-to-buy-and-sell-stock",
      "title": "Best Time to Buy and Sell Stock",
      "url": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock",
      "duration": 20,
      "epi": 0,
      "difficulty": "Easy",
      "id": 121,
      "topic": "array",
      "routines": [],
      "ProblemStatement":["You are given an array prices where prices[i] is the price of a given stock on the ith day.",
      "You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.",
      "Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0."]
    },
    {
      "slug": "valid-palindrome",
      "title": "Valid Palindrome",
      "url": "https://leetcode.com/problems/valid-palindrome",
      "duration": 15,
      "epi": 2,
      "difficulty": "Easy",
      "id": 125,
      "topic": "string",
      "routines": ["palindrome"],
      "ProblemStatement":["A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters", 
      "it reads the same forward and backward. Alphanumeric characters include letters and numbers.","Given a string s, return true if it is a palindrome, or false otherwise."]
    },
    {
      "slug": "invert-binary-tree",
      "title": "Invert Binary Tree",
      "url": "https://leetcode.com/problems/invert-binary-tree",
      "duration": 15,
      "epi": null,
      "difficulty": "Easy",
      "id": 226,
      "topic": "binary-tree",
      "routines": [],
      "ProblemStatement":["Given the root of a binary tree, invert the tree, and return its root."]
    },
    {
      "slug": "valid-anagram",
      "title": "Valid Anagram",
      "url": "https://leetcode.com/problems/valid-anagram",
      "duration": 15,
      "epi": null,
      "difficulty": "Easy",
      "id": 242,
      "topic": "string",
      "routines": ["anagram"],
      "ProblemStatement":["Given two strings s and t, return true if t is an anagram of s, and false otherwise.",
      "An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."]
    },
    {
      "slug": "binary-search",
      "title": "Binary Search",
      "url": "https://leetcode.com/problems/binary-search",
      "duration": 15,
      "epi": null,
      "difficulty": "Easy",
      "id": 792,
      "topic": "binary-search",
      "routines": [],
      "ProblemStatement":["Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums.",
      "If target exists, then return its index. Otherwise, return -1.","You must write an algorithm with O(log n) runtime complexity."]
    },
    {
      "slug": "flood-fill",
      "title": "Flood Fill",
      "url": "https://leetcode.com/problems/flood-fill",
      "duration": 20,
      "epi": 2,
      "difficulty": "Easy",
      "id": 733,
      "topic": "graph",
      "routines": ["matrix", "depth-first-search"],
      "ProblemStatement":["An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.",
      "You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].",
      "To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on.","Replace the color of all of the aforementioned pixels with color.",
      "Return the modified image after performing the flood fill."]
    },
    {
      "slug": "lowest-common-ancestor-of-a-binary-search-tree",
      "title": "Lowest Common Ancestor of a Binary Search Tree",
      "url": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",
      "duration": 20,
      "epi": 1,
      "difficulty": "Easy",
      "id": 235,
      "topic": "binary-search-tree",
      "routines": [],
      "ProblemStatement":["Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.",
      "According to the definition of LCA on Wikipedia:",
      "The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself)."]
    },
    {
      "slug": "balanced-binary-tree",
      "title": "Balanced Binary Tree",
      "url": "https://leetcode.com/problems/balanced-binary-tree",
      "duration": 15,
      "epi": 0,
      "difficulty": "Easy",
      "id": 110,
      "topic": "binary-tree",
      "routines": [],
      "ProblemStatement":["Given a binary tree, determine if it is height-balanced.",
      "A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one."]
    },
    {
      "slug": "linked-list-cycle",
      "title": "Linked List Cycle",
      "url": "https://leetcode.com/problems/linked-list-cycle",
      "duration": 20,
      "epi": 1,
      "difficulty": "Easy",
      "id": 141,
      "topic": "linked-list",
      "routines": ["two-pointers"],
      "ProblemStatement":["Given head, the head of a linked list, determine if the linked list has a cycle in it.",
"There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer.", 
"Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.",
"Return true if there is a cycle in the linked list. Otherwise, return false."]
    }
  ],
  "Week 2": [
    {
      "slug": "implement-queue-using-stacks",
      "title": "Implement Queue using Stacks",
      "url": "https://leetcode.com/problems/implement-queue-using-stacks",
      "duration": 20,
      "epi": 3,
      "difficulty": "Easy",
      "id": 232,
      "topic": "stack",
      "routines": [],
      "ProblemStatement":["Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).","Implement the MyQueue class:","void push(int x) Pushes element x to the back of the queue.","int pop() Removes the element from the front of the queue and returns it.",
      "int peek() Returns the element at the front of the queue.","boolean empty() Returns true if the queue is empty, false otherwise.","Notes:",
      "You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.","Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations."]
    },
    {
      "slug": "first-bad-version",
      "title": "First Bad Version",
      "url": "https://leetcode.com/problems/first-bad-version",
      "duration": 20,
      "epi": null,
      "difficulty": "Easy",
      "id": 278,
      "topic": "binary-search",
      "routines": [],
      "ProblemStatement":["You are a product manager and currently leading a team to develop a new product.","Unfortunately, the latest version of your product fails the quality check.",
      "Since each version is developed based on the previous version, all the versions after a bad version are also bad.","Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.","You are given an API bool isBadVersion(version) which returns whether version is bad.",
      "Implement a function to find the first bad version. You should minimize the number of calls to the API."]
    },
    {
      "slug": "ransom-note",
      "title": "Ransom Note",
      "url": "https://leetcode.com/problems/ransom-note",
      "duration": 15,
      "epi": 0,
      "difficulty": "Easy",
      "id": 383,
      "topic": "hash-table",
      "routines": [],
      "ProblemStatement":["Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.",
      "Each letter in magazine can only be used once in ransomNote."]
    },
    {
      "slug": "climbing-stairs",
      "title": "Climbing Stairs",
      "url": "https://leetcode.com/problems/climbing-stairs",
      "duration": 20,
      "epi": null,
      "difficulty": "Easy",
      "id": 70,
      "topic": "dynamic-programming",
      "routines": [],
      "ProblemStatement":["You are climbing a staircase. It takes n steps to reach the top.",
      "Each time you can either climb 1 or 2 steps.",
      "In how many distinct ways can you climb to the top?"]
    },
    {
      "slug": "longest-palindrome",
      "title": "Longest Palindrome",
      "url": "https://leetcode.com/problems/longest-palindrome",
      "duration": 20,
      "epi": 2,
      "difficulty": "Easy",
      "id": 409,
      "topic": "string",
      "routines": ["palindrome"],
      "ProblemStatement":["Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.",
      "Letters are case sensitive, for example, 'Aa' is not considered a palindrome here."]
    },
    {
      "slug": "reverse-linked-list",
      "title": "Reverse Linked List",
      "url": "https://leetcode.com/problems/reverse-linked-list",
      "duration": 20,
      "epi": 1,
      "difficulty": "Easy",
      "id": 206,
      "topic": "linked-list",
      "routines": [],
      "ProblemStatement":["Given the head of a singly linked list, reverse the list, and return the reversed list."]
    },
    {
      "slug": "majority-element",
      "title": "Majority Element",
      "url": "https://leetcode.com/problems/majority-element",
      "duration": 20,
      "epi": 2,
      "difficulty": "Easy",
      "id": 169,
      "topic": "array",
      "routines": ["sorting"],
      "ProblemStatement":["Given an array nums of size n, return the majority element.",
      "The majority element is the element that appears more than ⌊n / 2⌋ times.",
      "You may assume that the majority element always exists in the array."]
    },
    {
      "slug": "add-binary",
      "title": "Add Binary",
      "url": "https://leetcode.com/problems/add-binary",
      "duration": 15,
      "epi": null,
      "difficulty": "Easy",
      "id": 67,
      "topic": "binary",
      "routines": [],
      "ProblemStatement":["Given two binary strings a and b, return their sum as a binary string."]
    },
    {
      "slug": "diameter-of-binary-tree",
      "title": "Diameter of Binary Tree",
      "url": "https://leetcode.com/problems/diameter-of-binary-tree",
      "duration": 30,
      "epi": null,
      "difficulty": "Easy",
      "id": 543,
      "topic": "binary-tree",
      "routines": [],
      "ProblemStatement":["Given the root of a binary tree, return the length of the diameter of the tree.",
      "The diameter of a binary tree is the length of the longest path between any two nodes in a tree.",
      "This path may or may not pass through the root.",
      "The length of a path between two nodes is represented by the number of edges between them."]
    },
    {
      "slug": "middle-of-the-linked-list",
      "title": "Middle of the Linked List",
      "url": "https://leetcode.com/problems/middle-of-the-linked-list",
      "duration": 20,
      "epi": null,
      "difficulty": "Easy",
      "id": 908,
      "topic": "linked-list",
      "routines": ["two-pointers"],
      "ProblemStatement":["Given the head of a singly linked list, return the middle node of the linked list.",
      "If there are two middle nodes, return the second middle node."]
    },
    {
      "slug": "maximum-depth-of-binary-tree",
      "title": "Maximum Depth of Binary Tree",
      "url": "https://leetcode.com/problems/maximum-depth-of-binary-tree",
      "duration": 15,
      "epi": null,
      "difficulty": "Easy",
      "id": 104,
      "topic": "binary-tree",
      "routines": [],
      "ProblemStatement":["Given the root of a binary tree, return its maximum depth.",
      "A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node."]
    },
    {
      "slug": "contains-duplicate",
      "title": "Contains Duplicate",
      "url": "https://leetcode.com/problems/contains-duplicate",
      "duration": 15,
      "epi": null,
      "difficulty": "Easy",
      "id": 217,
      "topic": "array",
      "routines": ["hash-table", "sorting"],
      "ProblemStatement":["Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct."]
    }
  ],
  "Week 3": [
    {
      "slug": "min-stack",
      "title": "Min Stack",
      "url": "https://leetcode.com/problems/min-stack",
      "duration": 20,
      "epi": 0,
      "difficulty": "Medium",
      "id": 155,
      "topic": "stack",
      "routines": [],
      "ProblemStatement":["Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.",
      "Implement the MinStack class:",
      "MinStack() initializes the stack object.",
      "void push(int val) pushes the element val onto the stack.",
      "void pop() removes the element on the top of the stack.",
      "int top() gets the top element of the stack.",
      "int getMin() retrieves the minimum element in the stack.",
      "You must implement a solution with O(1) time complexity for each function."]
    },
    {
      "slug": "maximum-subarray",
      "title": "Maximum Subarray",
      "url": "https://leetcode.com/problems/maximum-subarray",
      "duration": 20,
      "epi": null,
      "difficulty": "Medium",
      "id": 53,
      "topic": "dynamic-programming",
      "routines": [],
      "ProblemStatement":["Given an integer array nums, find the subarray with the largest sum, and return its sum.",
      "A subarray is a contiguous non-empty sequence of elements within an array."]
    },
    {
      "slug": "insert-interval",
      "title": "Insert Interval",
      "url": "https://leetcode.com/problems/insert-interval",
      "duration": 25,
      "epi": null,
      "difficulty": "Medium",
      "id": 57,
      "topic": "array",
      "routines": ["interval"],
      "ProblemStatement":["You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval.",
      "intervals is sorted in ascending order by starti.","You are also given an interval newInterval = [start, end] that represents the start and end of another interval.",
      "Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).","Return intervals after the insertion."]
    },
    {
      "slug": "01-matrix",
      "title": "01 Matrix",
      "url": "https://leetcode.com/problems/01-matrix",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 542,
      "topic": "graph",
      "routines": ["breadth-first-search"],
      "ProblemStatement":["Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.",
      "The distance between two adjacent cells is 1."]
    },
    {
      "slug": "k-closest-points-to-origin",
      "title": "K Closest Points to Origin",
      "url": "https://leetcode.com/problems/k-closest-points-to-origin",
      "duration": 30,
      "epi": 1,
      "difficulty": "Medium",
      "id": 1014,
      "topic": "heap",
      "routines": ["geometry"],
      "ProblemStatement":["Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).",
      "The distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).",
      "You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in)."]
    },
    {
      "slug": "longest-substring-without-repeating-characters",
      "title": "Longest Substring Without Repeating Characters",
      "url": "https://leetcode.com/problems/longest-substring-without-repeating-characters",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 3,
      "topic": "string",
      "routines": ["sliding-window"],
      "ProblemStatement":["Given a string s, find the length of the longest substring without repeating characters.",
    "A substring is a contiguous non-empty sequence of characters within a string."]
    },
    {
      "slug": "3sum",
      "title": "3Sum",
      "url": "https://leetcode.com/problems/3sum",
      "duration": 30,
      "epi": 0,
      "difficulty": "Medium",
      "id": 15,
      "topic": "array",
      "routines": ["two-pointers"],
      "ProblemStatement":["Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.",
      "Notice that the solution set must not contain duplicate triplets."]
    },
    {
      "slug": "binary-tree-level-order-traversal",
      "title": "Binary Tree Level Order Traversal",
      "url": "https://leetcode.com/problems/binary-tree-level-order-traversal",
      "duration": 20,
      "epi": 1,
      "difficulty": "Medium",
      "id": 102,
      "topic": "binary-tree",
      "routines": [],
      "ProblemStatement":["Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level)."]
    },
    {
      "slug": "clone-graph",
      "title": "Clone Graph",
      "url": "https://leetcode.com/problems/clone-graph",
      "duration": 25,
      "epi": null,
      "difficulty": "Medium",
      "id": 133,
      "topic": "graph",
      "routines": ["depth-first-search", "breadth-first-search"],
      "ProblemStatement":["Given a reference of a node in a connected undirected graph.",
      "Return a deep copy (clone) of the graph.",
      "Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.",
      "class Node {\n public int val; \n public List<Node> neighbors;\n}"
    ]
    },
    {
      "slug": "evaluate-reverse-polish-notation",
      "title": "Evaluate Reverse Polish Notation",
      "url": "https://leetcode.com/problems/evaluate-reverse-polish-notation",
      "duration": 30,
      "epi": 2,
      "difficulty": "Medium",
      "id": 150,
      "topic": "stack",
      "routines": [],
      "ProblemStatement":["You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.",
      "Evaluate the expression. Return an integer that represents the value of the expression.","Note that:",
      "The valid operators are '+', '-', '*', and '/'.","Each operand may be an integer or another expression.",
      "The division between two integers always truncates toward zero.","There will not be any division by zero.",
      "The input represents a valid arithmetic expression in a reverse polish notation.",
      "The answer and all the intermediate calculations can be represented in a 32-bit integer."]
    }
  ],
  "Week 4": [
    {
      "slug": "course-schedule",
      "title": "Course Schedule",
      "url": "https://leetcode.com/problems/course-schedule",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 207,
      "topic": "graph",
      "routines": ["topo-sort"],
      "ProblemStatement":["There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1.",
      "You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.",
      "For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.",
      "Return true if you can finish all courses. Otherwise, return false."]
    },
    {
      "slug": "implement-trie-prefix-tree",
      "title": "Implement Trie (Prefix Tree)",
      "url": "https://leetcode.com/problems/implement-trie-prefix-tree",
      "duration": 35,
      "epi": null,
      "difficulty": "Medium",
      "id": 208,
      "topic": "trie",
      "routines": [],
      "ProblemStatement":["A trie (pronounced as 'try') or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings.",
      "Given head, the head of a linked list, determine if the linked list has a cycle in it.",
      "There are various applications of this data structure, such as autocomplete and spellchecker.",
      "Implement the Trie class:","Trie() Initializes the trie object.","void insert(String word) Inserts the string word into the trie.",
      "boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.",
      "boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise."]
    },
    {
      "slug": "coin-change",
      "title": "Coin Change",
      "url": "https://leetcode.com/problems/coin-change",
      "duration": 25,
      "epi": null,
      "difficulty": "Medium",
      "id": 322,
      "topic": "dynamic-programming",
      "routines": [],
      "ProblemStatement":["You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.",
      "Return the fewest number of coins that you need to make up that amount.",
      "If that amount of money cannot be made up by any combination of the coins, return -1.",
      "You may assume that you have an infinite number of each kind of coin."]
    },
    {
      "slug": "product-of-array-except-self",
      "title": "Product of Array Except Self",
      "url": "https://leetcode.com/problems/product-of-array-except-self",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 238,
      "topic": "array",
      "routines": ["prefix-sum"],
      "ProblemStatement":["Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].",
      "The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.",
      "You must write an algorithm that runs in O(n) time and without using the division operation."]
    },
    {
      "slug": "validate-binary-search-tree",
      "title": "Validate Binary Search Tree",
      "url": "https://leetcode.com/problems/validate-binary-search-tree",
      "duration": 20,
      "epi": null,
      "difficulty": "Medium",
      "id": 98,
      "topic": "binary-search-tree",
      "routines": [],
      "ProblemStatement":["Given the root of a binary tree, determine if it is a valid binary search tree (BST).",
      "A valid BST is defined as follows:",
      "The left subtree of a node contains only nodes with keys less than the node's key.",
      "The right subtree of a node contains only nodes with keys greater than the node's key.",
      "Both the left and right subtrees must also be binary search trees."]
    },
    {
      "slug": "number-of-islands",
      "title": "Number of Islands",
      "url": "https://leetcode.com/problems/number-of-islands",
      "duration": 25,
      "epi": null,
      "difficulty": "Medium",
      "id": 200,
      "topic": "graph",
      "routines": ["depth-first-search", " breadth-first-search"],
      "ProblemStatement":["Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.",
      "An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.",
      "You may assume all four edges of the grid are all surrounded by water."]
    },
    {
      "slug": "rotting-oranges",
      "title": "Rotting Oranges",
      "url": "https://leetcode.com/problems/rotting-oranges",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 1036,
      "topic": "graph",
      "routines": ["breadth-first-search"],
      "ProblemStatement":["You are given an m x n grid where each cell can have one of three values:",
      "0 representing an empty cell,",
      "1 representing a fresh orange, or 2 representing a rotten orange.",
      "Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.",
      "Return the minimum number of minutes that must elapse until no cell has a fresh orange.",
      "If this is impossible, return -1."]
    },
    {
      "slug": "search-in-rotated-sorted-array",
      "title": "Search in Rotated Sorted Array",
      "url": "https://leetcode.com/problems/search-in-rotated-sorted-array",
      "duration": 30,
      "epi": 2,
      "difficulty": "Medium",
      "id": 33,
      "topic": "binary-search",
      "routines": [],
      "ProblemStatement":["There is an integer array nums sorted in ascending order (with distinct values).",
      "Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed).","For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].",
      "Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.",
      "You must write an algorithm with O(log n) runtime complexity."]
    }
  ],
  "Week 5": [
    {
      "slug": "combination-sum",
      "title": "Combination Sum",
      "url": "https://leetcode.com/problems/combination-sum",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 39,
      "topic": "array",
      "routines": ["backtracking"],
      "ProblemStatement":["Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target.", "You may return the combinations in any order.",
      "The same number may be chosen from candidates an unlimited number of times.",
      "Two combinations are unique if the frequency of at least one of the chosen numbers is different.",
      "The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input."]
    },
    {
      "slug": "permutations",
      "title": "Permutations",
      "url": "https://leetcode.com/problems/permutations",
      "duration": 30,
      "epi": 2,
      "difficulty": "Medium",
      "id": 46,
      "topic": "recursion",
      "routines": ["backtracking"],
      "ProblemStatement":["Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order."]
    },
    {
      "slug": "merge-intervals",
      "title": "Merge Intervals",
      "url": "https://leetcode.com/problems/merge-intervals",
      "duration": 30,
      "epi": 3,
      "difficulty": "Medium",
      "id": 56,
      "topic": "array",
      "routines": ["interval"],
      "ProblemStatement":["Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input."]
    },
    {
      "slug": "lowest-common-ancestor-of-a-binary-tree",
      "title": "Lowest Common Ancestor of a Binary Tree",
      "url": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree",
      "duration": 25,
      "epi": null,
      "difficulty": "Medium",
      "id": 236,
      "topic": "binary-tree",
      "routines": [],
      "ProblemStatement":["Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.",
      "According to the definition of LCA on Wikipedia:",
      "The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself)."]
    },
    {
      "slug": "time-based-key-value-store",
      "title": "Time Based Key-Value Store",
      "url": "https://leetcode.com/problems/time-based-key-value-store",
      "duration": 35,
      "epi": null,
      "difficulty": "Medium",
      "id": 1023,
      "topic": "binary-search",
      "routines": [],
      "ProblemStatement":["Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp","Implement the TimeMap class:",
      "TimeMap() Initializes the object of the data structure.",
      "void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.",
      "String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp.",
      "If there are multiple such values, it returns the value associated with the largest timestamp_prev.",
      "If there are no values, it returns '.'"]
    },
    {
      "slug": "accounts-merge",
      "title": "Accounts Merge",
      "url": "https://leetcode.com/problems/accounts-merge",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 721,
      "topic": "graph",
      "routines": ["depth-first-search", "union-find"],
      "ProblemStatement":["Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.","Now, we would like to merge these accounts.",
      "Two accounts definitely belong to the same person if there is some common email to both accounts.",
      "Note that even if two accounts have the same name, they may belong to different people as people could have the same name.",
      "A person can have any number of accounts initially, but all of their accounts definitely have the same name.","After merging the accounts, return the accounts in the following format:",
      "the first element of each account is the name, and the rest of the elements are emails in sorted order.",
      "The accounts themselves can be returned in any order."]
    },
    {
      "slug": "sort-colors",
      "title": "Sort Colors",
      "url": "https://leetcode.com/problems/sort-colors",
      "duration": 25,
      "epi": 0,
      "difficulty": "Medium",
      "id": 75,
      "topic": "array",
      "routines": ["two-pointers"],
      "ProblemStatement":["Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.", 
      "We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.",
      "You must solve this problem without using the library's sort function."]
    },
    {
      "slug": "word-break",
      "title": "Word Break",
      "url": "https://leetcode.com/problems/word-break",
      "duration": 30,
      "epi": 2,
      "difficulty": "Medium",
      "id": 139,
      "topic": "trie",
      "routines": [],
      "ProblemStatement":["Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.",
      "Note that the same word in the dictionary may be reused multiple times in the segmentation."]
    }
  ],
  "Week 6": [
    {
      "slug": "partition-equal-subset-sum",
      "title": "Partition Equal Subset Sum",
      "url": "https://leetcode.com/problems/partition-equal-subset-sum",
      "duration": 30,
      "epi": 2,
      "difficulty": "Medium",
      "id": 416,
      "topic": "dynamic-programming",
      "routines": [],
      "ProblemStatement":["Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise"]
    },
    {
      "slug": "string-to-integer-atoi",
      "title": "String to Integer (atoi)",
      "url": "https://leetcode.com/problems/string-to-integer-atoi",
      "duration": 25,
      "epi": 0,
      "difficulty": "Medium",
      "id": 8,
      "topic": "string",
      "routines": [],
      "ProblemStatement":["Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).",
      "The algorithm for myAtoi(string s) is as follows:","Read in and ignore any leading whitespace.",
      "Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either.",
      "This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.",
      "Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.",
      "Convert these digits into an integer (i.e. '123' -> 123, '0032' -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).",
      "If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range.",
      "Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.",
      "Return the integer as the final result.","Note:","Only the space character ' ' is considered a whitespace character.",
      "Do not ignore any characters other than the leading whitespace or the rest of the string after the digits."]
    },
    {
      "slug": "spiral-matrix",
      "title": "Spiral Matrix",
      "url": "https://leetcode.com/problems/spiral-matrix",
      "duration": 25,
      "epi": 1,
      "difficulty": "Medium",
      "id": 54,
      "topic": "matrix",
      "routines": [],
      "ProblemStatement":["Given an m x n matrix, return all elements of the matrix in spiral order."]
    },
    {
      "slug": "subsets",
      "title": "Subsets",
      "url": "https://leetcode.com/problems/subsets",
      "duration": 30,
      "epi": 3,
      "difficulty": "Medium",
      "id": 78,
      "topic": "recursion",
      "routines": ["backtracking"],
      "ProblemStatement":["Given an integer array nums of unique elements, return all possible subsets (the power set).",
      "The solution set must not contain duplicate subsets. Return the solution in any order."]
    },
    {
      "slug": "binary-tree-right-side-view",
      "title": "Binary Tree Right Side View",
      "url": "https://leetcode.com/problems/binary-tree-right-side-view",
      "duration": 20,
      "epi": null,
      "difficulty": "Medium",
      "id": 199,
      "topic": "binary-tree",
      "routines": [],
      "ProblemStatement":["Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom."]
    },
    {
      "slug": "longest-palindromic-substring",
      "title": "Longest Palindromic Substring",
      "url": "https://leetcode.com/problems/longest-palindromic-substring",
      "duration": 25,
      "epi": null,
      "difficulty": "Medium",
      "id": 5,
      "topic": "string",
      "routines": ["palindrome", "two-pointer", "dynamic-programming"],
      "ProblemStatement":["Given a string s, return the longest palindromic substring in s."]
    },
    {
      "slug": "unique-paths",
      "title": "Unique Paths",
      "url": "https://leetcode.com/problems/unique-paths",
      "duration": 20,
      "epi": 2,
      "difficulty": "Medium",
      "id": 62,
      "topic": "dynamic-programming",
      "routines": [],
      "ProblemStatement":["There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]).",
      "The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.",
      "Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.",
      "The test cases are generated so that the answer will be less than or equal to 2 * 109."]
    },
    {
      "slug": "construct-binary-tree-from-preorder-and-inorder-traversal",
      "title": "Construct Binary Tree from Preorder and Inorder Traversal",
      "url": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",
      "duration": 25,
      "epi": 2,
      "difficulty": "Medium",
      "id": 105,
      "topic": "binary-tree",
      "routines": [],
      "ProblemStatement":["Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree."]
    },
    {
      "slug": "container-with-most-water",
      "title": "Container With Most Water",
      "url": "https://leetcode.com/problems/container-with-most-water",
      "duration": 35,
      "epi": 2,
      "difficulty": "Medium",
      "id": 11,
      "topic": "array",
      "routines": ["greedy", "two-pointers"],
      "ProblemStatement":["You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).",
      "Find two lines that together with the x-axis form a container, such that the container contains the most water.","Return the maximum amount of water a container can store.","Notice that you may not slant the container."]
    }
  ],
  "Week 7": [
    {
      "slug": "letter-combinations-of-a-phone-number",
      "title": "Letter Combinations of a Phone Number",
      "url": "https://leetcode.com/problems/letter-combinations-of-a-phone-number",
      "duration": 30,
      "epi": 3,
      "difficulty": "Medium",
      "id": 17,
      "topic": "recursion",
      "routines": ["backtracking"],
      "ProblemStatement":["Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.",
      "A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters."]
    },
    {
      "slug": "word-search",
      "title": "Word Search",
      "url": "https://leetcode.com/problems/word-search",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 79,
      "topic": "graph",
      "routines": ["backtracking"],
      "ProblemStatement":["Given an m x n grid of characters board and a string word, return true if word exists in the grid.",
      "The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.",
      "The same letter cell may not be used more than once."]
    },
    {
      "slug": "find-all-anagrams-in-a-string",
      "title": "Find All Anagrams in a String",
      "url": "https://leetcode.com/problems/find-all-anagrams-in-a-string",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 438,
      "topic": "string",
      "routines": ["anagram"],
      "ProblemStatement":["Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.",
      "An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."]
    },
    {
      "slug": "minimum-height-trees",
      "title": "Minimum Height Trees",
      "url": "https://leetcode.com/problems/minimum-height-trees",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 310,
      "topic": "graph",
      "routines": ["topo-sort"],
      "ProblemStatement":["A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.",
      "Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root.",
      "When you select a node x as the root, the result tree has height h.",
      "Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).",
      "Return a list of all MHTs' root labels. You can return the answer in any order.",
      "The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf."]
    },
    {
      "slug": "task-scheduler",
      "title": "Task Scheduler",
      "url": "https://leetcode.com/problems/task-scheduler",
      "duration": 35,
      "epi": null,
      "difficulty": "Medium",
      "id": 621,
      "topic": "heap",
      "routines": [],
      "ProblemStatement":["Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task.",
      "Tasks could be done in any order. Each task is done in one unit of time.",
      "For each unit of time, the CPU could complete either one task or just be idle."," However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.",
      "Return the least number of units of times that the CPU will take to finish all the given tasks."]
    },
    {
      "slug": "lru-cache",
      "title": "LRU Cache",
      "url": "https://leetcode.com/problems/lru-cache",
      "duration": 30,
      "epi": null,
      "difficulty": "Medium",
      "id": 146,
      "topic": "linked-list",
      "routines": ["hash-table"],
      "ProblemStatement":["Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.",
      "Implement the LRUCache class:",
      "LRUCache(int capacity) Initialize the LRU cache with positive size capacity.",
      "int get(int key) Return the value of the key if the key exists, otherwise return -1.",
      "void put(int key, int value) Update the value of the key if the key exists.",
      "Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.",
      "The functions get and put must each run in O(1) average time complexity."]
    },
    {
      "slug": "kth-smallest-element-in-a-bst",
      "title": "Kth Smallest Element in a BST",
      "url": "https://leetcode.com/problems/kth-smallest-element-in-a-bst",
      "duration": 25,
      "epi": null,
      "difficulty": "Medium",
      "id": 230,
      "topic": "binary-search-tree",
      "routines": [],
      "ProblemStatement":["Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree."]
    },
    {
      "slug": "minimum-window-substring",
      "title": "Minimum Window Substring",
      "url": "https://leetcode.com/problems/minimum-window-substring",
      "duration": 30,
      "epi": 3,
      "difficulty": "Hard",
      "id": 76,
      "topic": "string",
      "routines": ["sliding-window"],
      "ProblemStatement":["Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window.","If there is no such substring, return the empty string.","The testcases will be generated such that the answer is unique."]
    }
  ],
  "Week 8": [
    {
      "slug": "serialize-and-deserialize-binary-tree",
      "title": "Serialize and Deserialize Binary Tree",
      "url": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree",
      "duration": 40,
      "epi": null,
      "difficulty": "Hard",
      "id": 297,
      "topic": "binary-tree",
      "routines": [],
      "ProblemStatement":["Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.",
      "Design an algorithm to serialize and deserialize a binary tree.",
      "There is no restriction on how your serialization/deserialization algorithm should work.",
      "You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.",
      "Clarification: The input/output format is the same as how LeetCode serializes a binary tree.",
      "You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself."]
    },
    {
      "slug": "trapping-rain-water",
      "title": "Trapping Rain Water",
      "url": "https://leetcode.com/problems/trapping-rain-water",
      "duration": 35,
      "epi": null,
      "difficulty": "Hard",
      "id": 42,
      "topic": "stack",
      "routines": ["monotonic-stack"],
      "ProblemStatement":["Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining."]
    },
    {
      "slug": "find-median-from-data-stream",
      "title": "Find Median from Data Stream",
      "url": "https://leetcode.com/problems/find-median-from-data-stream",
      "duration": 30,
      "epi": 3,
      "difficulty": "Hard",
      "id": 295,
      "topic": "heap",
      "routines": [],
      "ProblemStatement":["The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values","For example, for arr = [2,3,4], the median is 3.","For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.",
      "Implement the MedianFinder class:",
      "MedianFinder() initializes the MedianFinder object.","void addNum(int num) adds the integer num from the data stream to the data structure.",
      "double findMedian() returns the median of all elements so far.",
      "Answers within 10-5 of the actual answer will be accepted."]
    },
    {
      "slug": "word-ladder",
      "title": "Word Ladder",
      "url": "https://leetcode.com/problems/word-ladder",
      "duration": 45,
      "epi": null,
      "difficulty": "Hard",
      "id": 127,
      "topic": "graph",
      "routines": ["breadth-first-search"],
      "ProblemStatement":["A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:",
      "Every adjacent pair of words differs by a single letter.",
      "Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.",
      "sk == endWord",
      "Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists."]
    },
    {
      "slug": "basic-calculator",
      "title": "Basic Calculator",
      "url": "https://leetcode.com/problems/basic-calculator",
      "duration": 40,
      "epi": null,
      "difficulty": "Hard",
      "id": 224,
      "topic": "stack",
      "routines": ["parsing"],
      "ProblemStatement":["Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.",
      "Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().","Constraints",
      "1 <= s.length <= 3 * 105",
      "s consists of digits, '+', '-', '(', ')', and ' '.",
      "s represents a valid expression.","'+' is not used as a unary operation (i.e., '+1' and '+(2 + 3)' is invalid).",
      "'-' could be used as a unary operation (i.e., '-1' and '-(2 + 3)' is valid).",
      "There will be no two consecutive operators in the input.",
      "Every number and running calculation will fit in a signed 32-bit integer."]
    },
    {
      "slug": "maximum-profit-in-job-scheduling",
      "title": "Maximum Profit in Job Scheduling",
      "url": "https://leetcode.com/problems/maximum-profit-in-job-scheduling",
      "duration": 45,
      "epi": null,
      "difficulty": "Hard",
      "id": 1352,
      "topic": "binary-search",
      "routines": ["dynamic-programming"],
      "ProblemStatement":["We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].",
      "You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.",
      "If you choose a job that ends at time X you will be able to start another job that starts at time X."]
    },
    {
      "slug": "merge-k-sorted-lists",
      "title": "Merge k Sorted Lists",
      "url": "https://leetcode.com/problems/merge-k-sorted-lists",
      "duration": 30,
      "epi": null,
      "difficulty": "Hard",
      "id": 23,
      "topic": "heap",
      "routines": [],
      "ProblemStatement":["You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.",
      "Merge all the linked-lists into one sorted linked-list and return it."]
    },
    {
      "slug": "largest-rectangle-in-histogram",
      "title": "Largest Rectangle in Histogram",
      "url": "https://leetcode.com/problems/largest-rectangle-in-histogram",
      "duration": 35,
      "epi": 3,
      "difficulty": "Hard",
      "id": 84,
      "topic": "stack",
      "routines": ["monotonic-stack"],
      "ProblemStatement":["Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram."]
    }
  ]
}
